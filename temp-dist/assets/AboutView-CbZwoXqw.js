import{_ as i,a as s,o as n,b as t,d,e,i as o,j as r,u as l,R as c,f as p}from"./index-UdmPU5Gk.js";const v={class:"about"},u={class:"about-container"},m={class:"about-content"},h={class:"about-section"},f={__name:"AboutView",setup(x){return(g,a)=>(n(),s("div",v,[t("div",u,[a[7]||(a[7]=t("div",{class:"about-header"},[t("h1",null,"About Lazer"),t("p",{class:"about-subtitle"}," Exploring the beauty of impure lambda calculus through interactive programming ")],-1)),t("div",m,[a[5]||(a[5]=d('<section class="about-section" data-v-0162a0d9><h2 data-v-0162a0d9><img src="'+p+'" alt="Lazer" class="hero-icon" data-v-0162a0d9> What is Lazer?</h2><p data-v-0162a0d9> Lazer is a programming language built on the foundations of <strong data-v-0162a0d9>impure lambda calculus</strong>. It provides a safe, educational environment for exploring functional programming concepts while maintaining mathematical rigor and computational expressiveness. </p></section><section class="about-section" data-v-0162a0d9><h2 data-v-0162a0d9>ðŸ“š Educational Focus</h2><p data-v-0162a0d9> Our primary goal is to make lambda calculus accessible and understandable. Whether you&#39;re a student learning functional programming concepts or a developer exploring the mathematical foundations of computation, Lazer provides: </p><ul data-v-0162a0d9><li data-v-0162a0d9>Interactive code execution with step-by-step explanations</li><li data-v-0162a0d9>AI-powered analysis of lambda expressions</li><li data-v-0162a0d9>Real-time feedback on syntax and semantics</li><li data-v-0162a0d9>Safe sandboxed environment for experimentation</li></ul></section><section class="about-section" data-v-0162a0d9><h2 data-v-0162a0d9>ðŸ”§ Language Features</h2><div class="feature-grid" data-v-0162a0d9><div class="feature-item" data-v-0162a0d9><h3 data-v-0162a0d9># Notation</h3><p data-v-0162a0d9>Uses # instead of Î» for better accessibility and typing convenience</p></div><div class="feature-item" data-v-0162a0d9><h3 data-v-0162a0d9>Church Encoding</h3><p data-v-0162a0d9>Full support for Church numerals and boolean operations</p></div><div class="feature-item" data-v-0162a0d9><h3 data-v-0162a0d9>Function Composition</h3><p data-v-0162a0d9>Natural function composition and currying support</p></div><div class="feature-item" data-v-0162a0d9><h3 data-v-0162a0d9>Safe Evaluation</h3><p data-v-0162a0d9>Controlled execution environment with resource limits</p></div></div></section><section class="about-section" data-v-0162a0d9><h2 data-v-0162a0d9>ðŸŽ¯ Core Principles</h2><div class="principles" data-v-0162a0d9><div class="principle" data-v-0162a0d9><h3 data-v-0162a0d9>Safety First</h3><p data-v-0162a0d9> All code execution is sandboxed and restricted to valid Lazer syntax. No system access or external resource manipulation is permitted. </p></div><div class="principle" data-v-0162a0d9><h3 data-v-0162a0d9>Educational Value</h3><p data-v-0162a0d9> Every feature is designed to enhance understanding of functional programming and lambda calculus concepts through hands-on experimentation. </p></div><div class="principle" data-v-0162a0d9><h3 data-v-0162a0d9>Mathematical Foundation</h3><p data-v-0162a0d9> Built on solid mathematical principles, ensuring that concepts learned here translate directly to theoretical computer science. </p></div></div></section>',4)),t("section",h,[a[3]||(a[3]=t("h2",null,"ðŸš€ Getting Started",-1)),t("p",null,[a[1]||(a[1]=e(" Ready to dive in? Head over to our ",-1)),o(l(c),{to:"/playground",class:"link"},{default:r(()=>[...a[0]||(a[0]=[e("Playground",-1)])]),_:1}),a[2]||(a[2]=e(" and start experimenting with lambda expressions. Try the examples provided, or create your own expressions to see how they evaluate. ",-1))]),a[4]||(a[4]=t("p",null," Each execution comes with detailed AI explanations to help you understand what's happening at each step of the evaluation process. ",-1))]),a[6]||(a[6]=d('<section class="about-section" data-v-0162a0d9><h2 data-v-0162a0d9>ðŸ“– Example Expressions</h2><div class="examples" data-v-0162a0d9><div class="example" data-v-0162a0d9><code data-v-0162a0d9>#x.x</code><span data-v-0162a0d9>Identity function</span></div><div class="example" data-v-0162a0d9><code data-v-0162a0d9>#x.#y.x</code><span data-v-0162a0d9>Constant function</span></div><div class="example" data-v-0162a0d9><code data-v-0162a0d9>#f.#x.f x</code><span data-v-0162a0d9>Church numeral 1</span></div><div class="example" data-v-0162a0d9><code data-v-0162a0d9>#f.#x.f (f x)</code><span data-v-0162a0d9>Church numeral 2</span></div></div></section>',1))])])]))}},y=i(f,[["__scopeId","data-v-0162a0d9"]]);export{y as default};
